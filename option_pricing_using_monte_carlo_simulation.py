# -*- coding: utf-8 -*-
"""Option pricing using Monte Carlo Simulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Acw-B4Yi9KfY45CpdET6Ghp2oibJBoOx
"""

import matplotlib.pyplot as plt
import numpy as np

def monte_carlo_option_pricing(S, K, T, r, sigma, option_type, num_simulations, plot_simulation=False):
    """ Function to price European call or put option using Monte Carlo simulation
    
    Parameters:
    S (float): initial stock price
    K (float): strike price
    T (float): time to maturity (in years)
    r (float): risk-free interest rate
    sigma (float): stock price volatility
    option_type (str): 'call' or 'put'
    num_simulations (int): number of Monte Carlo simulations
    plot_simulation (bool): whether to plot the stock price simulation
    
    Returns:
    tuple: option price and simulated stock price paths
    """
    
    # Calculate parameters
    dt = 1/365 # time step (in years)
    N = int(T/dt) # number of time steps
    M = num_simulations # number of simulations
    
    # Simulate stock price paths
    stock_price = np.zeros((N+1, M))
    stock_price[0] = S
    for t in range(1, N+1):
        z = np.random.standard_normal(M)
        stock_price[t] = stock_price[t-1] * np.exp((r-0.5*sigma**2)*dt + sigma*np.sqrt(dt)*z)
    
    # Calculate option payoff
    if option_type == 'call':
        option_payoff = np.maximum(stock_price[-1]-K, 0)
    else:
        option_payoff = np.maximum(K-stock_price[-1], 0)
        
    # Calculate option price
    option_price = np.exp(-r*T) * np.mean(option_payoff)
    
    if plot_simulation:
        # Plot stock price simulation
        plt.figure()
        plt.plot(np.arange(N+1)/365, stock_price)
        plt.xlabel('Time (years)')
        plt.ylabel('Stock price')
        plt.title('Monte Carlo simulation of stock price paths')
        plt.show()
    
    return option_price, stock_price

# Example usage
S = 100 # initial stock price
K = 110 # strike price
T = 1 # time to maturity (in years)
r = 0.05 # risk-free interest rate
sigma = 0.2 # stock price volatility
option_type = 'put' # option type
num_simulations = 10000 # number of Monte Carlo simulations

option_price, stock_price = monte_carlo_option_pricing(S, K, T, r, sigma, option_type, num_simulations, plot_simulation=True)

print('Option price: ', option_price)